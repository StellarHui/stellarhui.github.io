<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>存储结构之SRAM, DRAM和Memory Controller</title>
      <link href="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/"/>
      <url>/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/</url>
      
        <content type="html"><![CDATA[<h1 id="sram-dram和memory-controller">SRAM, DRAM和Memory Controller</h1><p>​ 在本节中，我们将重点关注SRAM,DRAM存储结构的物理实现，<strong>补充基础常识上的缺失</strong>（但不需要了解太深入，毕竟学的是计算机不是电路）。</p><h2 id="sram">SRAM</h2><p>​ SRAM无需刷新，速度快，支持非连续性访问，适合高速缓存（L1/L2Cache），其性能通常优于DRAM。但其<strong>缺点</strong>是：无法避免软错误率（SER）和静态功耗，且具有易失性。</p><p><img src="image-20250719185934420.png" /></p><h3 id="sram-memory-cell">SRAM Memory Cell</h3><p>​ SRAM由能够存储1 bit的Memory Cell单元（两个交叉耦合的反相器 +两个访问晶体管）组成。</p><p><img src="image-20250719184508940.png" /></p><p>其中，两个交叉耦合的反相器有不同的实现方法，如Full-CMOS6TMC，TFT-PMOS MC等。一种实现是：</p><p><img src="image-20250719190610168.png" /></p><blockquote><p><strong>备注：</strong>一些基本结构和术语：</p><ul><li><strong>WL（WordLine，字线）</strong>：水平方向的金属线，连接<strong>一行所有MemoryCell</strong>的<strong>访问晶体管栅极</strong>（Gate）。当WL被激活（高电平）时，该行所有细胞的访问晶体管导通，细胞内存储的数据会传输到对应的位线对（BL/BLB）。</li><li><strong>BL（Bit Line，位线）与BLB（Bit LineBar，反相位线）</strong>：垂直方向的一对互补金属线，连接<strong>一列所有MemoryCell</strong>的<strong>访问晶体管源极/漏极</strong>（Source/Drain）。<ul><li><strong>BL</strong>：传输细胞存储的<strong>原始信号</strong>（如存储“1”时，BL为高电平）；</li><li><strong>BLB</strong>：传输<strong>BL的反相信号</strong>（如存储“1”时，BLB为低电平）；两者形成<strong>差分信号</strong>（BL -BLB），目的是<strong>提高抗噪声能力</strong>（共模噪声会同时影响BL和BLB，差分信号不受其干扰）。</li></ul></li><li><strong>SA（Sense Amplifier， sense放大器）</strong>：连接在每列BL/BLB的末端，用于<strong>放大微小的差分信号</strong>。</li></ul></blockquote><h3 id="地址译码">地址译码</h3><p>​地址译码的本质是<strong>将输入的二进制地址转换为选中特定存储单元的控制信号</strong>，关键目标是<strong>高效激活目标行（字线）</strong>和<strong>选择目标列（位线）</strong>。分为下面几步：</p><ul><li><strong>预译码（Predecoding）</strong>：将行地址拆分为多个子集（如8位行地址拆分为两个4位子集），用低扇入门（如4输入AND）生成预译码信号（16个信号/子集）。这是为了减少高扇入门的数量。</li><li><strong>行译码（RowDecoding）</strong>：将预译码信号组合（如2输入AND）生成<strong>全局字线（GWL）</strong>，再结合<strong>块选择信号</strong>（BlockSelect）生成<strong>局部字线（LWL）</strong>（Divided Wordline,DWL技术），激活目标行的所有存储单元。</li><li><strong>列译码（ColumnDecoding）</strong>：将列地址译码，通过<strong>多路复用器（MUX）</strong>选择目标列，连接到sense放大器或写入电路。</li></ul><p><img src="image-20250719192032806.png" /></p><h2 id="dram">DRAM</h2><p>​与SRAM不同，DRAM需定期刷新（dynamic），读写速度慢，适合作为主存。（但同样具有易失性）</p><h3 id="dram-1t1c-cell">DRAM 1T1C Cell</h3><p>​DRAM以<strong>1T1C存储单元</strong>（1个晶体管+1个电容）作为存储的基本单元。</p><h3 id="地址译码-1">地址译码</h3><p>​ DRAM的译码过程可以分为下面几步：</p><ul><li><strong>行译码</strong>：行地址（如12位）通过<strong>行译码器</strong>激活对应的<strong>字线</strong>，选中一行的所有存储单元；</li><li><strong>列译码</strong>：列地址（如10位）通过<strong>列译码器</strong>选择对应的<strong>位线</strong>，连接到sense放大器或写入电路；</li><li><strong>BankSelection</strong>：现代DRAM包含多个<strong>Bank</strong>，地址中的<strong>BankID</strong>选择目标bank，实现并行操作（提高带宽）。</li></ul><p><img src="image-20250719193007174.png" /></p><blockquote><p><strong>地址复用（AddressMultiplexing）</strong>：DRAM的地址线是<strong>复用</strong>的（行地址与列地址共用同一组引脚），因此需通过<strong>行地址strobe（RAS#）</strong>和<strong>列地址strobe（CAS#）</strong>信号区分。</p></blockquote><h2 id="dram-memory-controller">DRAM Memory Controller</h2><p>​DRAM内存控制器起到“承上启下”的作用：（1）向上仲裁（CPU/I/O）竞争访问权；（2）向下管理调度各DRAM的访问。其核心架构为：</p><p><img src="image-20250719193646279.png" /></p><p>一些设计要点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">                      +-----------------+</span><br><span class="line">CPU/I/O Requests →  | 请求仲裁逻辑     | → 胜出请求进入地址映射</span><br><span class="line">                      +-----------------+</span><br><span class="line">                                                ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 地址映射引擎     | → 输出 (Channel, Rank, Bank, Row, Column)</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | DRAM命令生成器   | → 生成 ACT/READ/WRITE/PRE 序列</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 命令调度队列     | → 按策略排序命令 (FIFO/按库/按优先级)</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 电气接口驱动     | → 满足时序约束的DRAM信号输出</span><br><span class="line">                                  +-----------------+</span><br></pre></td></tr></table></figure><p>可以类比操作系统的管理：各个DRAM“类似于”各个进程（或者“库”），DRAMMemoryController“类似于”OS。于是不难理解，其<strong>调度算法</strong>包含轮询(Round-Robin)，最长队列优先 (LQF)，最早到期优先 (EDF)等。</p><blockquote><p><strong>参考文献</strong>：Memory Systems (Cache, DRAM, Disk).</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3D集成芯片</title>
      <link href="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/"/>
      <url>/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="d集成芯片">3D集成芯片</h1><h2 id="d集成与封装技术">3D集成与封装技术</h2><h3 id="从2d-ic到3d-ic">从2D IC到3D IC</h3><table><colgroup><col style="width: 15%" /><col style="width: 38%" /><col style="width: 45%" /></colgroup><thead><tr><th style="text-align: center;"><strong>维度</strong></th><th style="text-align: center;"><strong>2D IC</strong></th><th style="text-align: center;"><strong>3D IC</strong></th></tr></thead><tbody><tr><td style="text-align: center;"><strong>结构</strong></td><td style="text-align: center;">单层平面布局</td><tdstyle="text-align: center;">多层垂直堆叠（逻辑层、缓存层、DRAM层等）</td></tr><tr><td style="text-align: center;"><strong>互连方式</strong></td><td style="text-align: center;">金属线水平绕行（长距离，高RC延迟）</td><td style="text-align: center;">TSV垂直直连（短距离，低RC延迟）</td></tr><tr><td style="text-align: center;"><strong>互连密度</strong></td><td style="text-align: center;">受限于引脚数量（带宽瓶颈）</td><td style="text-align: center;">TSV密度<strong>&gt;1000个/mm²</strong>（高带宽）</td></tr><tr><td style="text-align: center;"><strong>成本、散热</strong></td><td style="text-align: center;">成本低，散热快</td><td style="text-align: center;">成本高，散热慢</td></tr></tbody></table><h3 id="d封装技术">3D封装技术</h3><p>​ <strong>3D封装技术</strong>通过封装级堆叠独立芯片（如AppleA8处理器堆叠CPU与DRAM），使用引线键合（WireBonding）或微凸块连接，通信依赖<strong>片外信号</strong>。常见的有2种：</p><p><img src="./3D集成芯片/image-20250719140544510.png" /></p><h3 id="d集成技术">3D集成技术</h3><p>​ 该技术产生的是<strong>3DIC</strong>，通过<strong>硅通孔（TSV）</strong>实现层间垂直互联，提供<strong>片内级</strong>高密度连接（微米级间距）。该技术具有下面的优势：</p><ul><li><strong>线长缩减（Wire LengthReduction）</strong>：带来通信延迟、功耗的减少。</li><li><strong>内存带宽提升（Memory BandwidthImprovement）</strong>：使用3D架构，可以<strong>堆叠DRAM作末级缓存（LLC）</strong>或者<strong>堆叠DRAM作主存</strong>。</li><li><strong>垂直异构集成（HeterogeneousIntegration）</strong>：不同功能层（逻辑/存储/光子）可独立制造，通过TSV互联。</li><li><strong>成本效益（Cost-effectiveArchitecture）</strong>：分割大芯片为小芯片堆叠，提升总体良率。（然而TSV会增加成本）</li></ul><h2 id="d堆叠处理器设计">3D堆叠处理器设计</h2><h2 id="d-noc设计">3D NoC设计</h2><h2 id="d散热模型">3D散热模型</h2><h2 id="d成本模型">3D成本模型</h2><blockquote><p><strong>参考文献</strong>：Die-stacking Architecture.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
