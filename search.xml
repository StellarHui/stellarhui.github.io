<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多芯粒系统的互联结构</title>
      <link href="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/"/>
      <url>/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="多芯粒系统的互联结构"><a href="#多芯粒系统的互联结构" class="headerlink" title="多芯粒系统的互联结构"></a>多芯粒系统的互联结构</h1><p>本节主要关注多芯粒系统中用于互联、通信的3种结构：<strong>（1）路由器；（2）跨芯粒D2D接口；（3）I/O Die。<strong>下面将梳理其大致物理架构，重点关注</strong>如何评估其性能、功耗、面积、成本（以为DSE服务）。</strong></p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><img src="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/image-20250723101107798.png"></p><h2 id="D2D接口"><a href="#D2D接口" class="headerlink" title="D2D接口"></a>D2D接口</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>可以把芯粒间的die-to-die接口分为2层：<strong>物理层（physical layer (PHY)）和协议层（protocol layer (Adapter)）</strong>。（当然也有人分为3层，比如《Chiplet互连标准UCIe》，但本质相同）常见的D2D接口分为2类：</p><ul><li><strong>串行接口（serial interface）</strong>：特点是high-data-rate, long-reach, high-latency, high-power，例如SerDes；</li><li><strong>并行接口（parallel interface）</strong>：特点是low-power, low-latency, short-reach, low-data-rate, and high-port-count (costly)，例如AIB, OpenHBI。</li></ul><p><img src="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/image-20250723144607084.png" alt="image-20250723144607084"></p><p>下图是两种接口的微架构。描述了数据包flit跨芯粒传输的过程：从原芯粒某个核的router出发，经过adapter（协议层），随后进入片外的PHY（物理层），传输到达目标芯粒的PHY，然后重新进入adapter转变信号格式，最后到达目标核的router，进入目标核。</p><p><img src="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/image-20250723140342567.png"></p><p>除此之外，还有一些基于更先进封装技术（如2.5D）的接口，比如BoW, UCIe，可以看成是串行接口和并行接口的结合。</p><blockquote><p><strong>注</strong>：同一个接口（同一PHY）上支持运行不同的协议，比如Compute Express Link (CXL), PCI Express, Ethernet protocols 可以在 SerDes PHY 上同时运行。</p></blockquote><h3 id="功耗"><a href="#功耗" class="headerlink" title="功耗"></a>功耗</h3><blockquote><p><strong>参考文献</strong>：</p><ul><li>Heterogeneous Die-to-Die Interfaces: Enabling More Flexible Chiplet Interconnection Systems (MICRO’23).</li><li>On-Chip Networks, second edition.</li><li></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM加速芯片DSE（1）：硬件变量</title>
      <link href="/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/"/>
      <url>/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="LLM推理加速芯片DSE（1）：硬件变量"><a href="#LLM推理加速芯片DSE（1）：硬件变量" class="headerlink" title="LLM推理加速芯片DSE（1）：硬件变量"></a>LLM推理加速芯片DSE（1）：硬件变量</h1><p>设计芯片就像“盖楼”：在给定“地皮面积”（或者预算成本）的约束下，怎么规划盖楼，会使得性能（或者某个指标）最优？这就是DSE的意义。考虑片上面积给定的约束条件，有3类资源会占据片上面积：计算资源、存储资源、互联资源，因此DSE的工作经常将它们作为变量进行设计空间探索。这就是<strong>硬件变量</strong>。</p><blockquote><p><strong>评估指标</strong>：性能（执行时间），面积，功耗（或者散热），成本。</p><p><strong>评估方法</strong>：（A） 使用仿真器或者真机跑数据；（B）使用论文中的model进行量化计算。</p></blockquote><p>本节主要关注如何获取对应的性能、面积、功耗、成本<strong>数据</strong>。</p><h2 id="计算类"><a href="#计算类" class="headerlink" title="计算类"></a>计算类</h2><p>PE, CPU, GPU等。一般的<strong>性能评估方法</strong>是：（A.1）可以看微架构图，观察<strong>流水线的深度</strong>；（A.2）或者写verilog代码，运行仿真看最终消耗的<strong>cycle数目</strong>。</p><p>对于<strong>面积、功耗的评估</strong>，一般采用（A）写verilog代码，随后进行DC综合的方法。</p><p>对于<strong>成本的评估</strong>，需要细分PE的结构（多少MAC阵列，存储结构、控制单元的结构），然后使用（B）理论模型对各项进行估计并累加。</p><h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h2><p><strong>资源类别：</strong></p><table><thead><tr><th></th><th>SRAM</th><th>DRAM</th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>（A）使用Cacti或NVSim仿真</td><td>（A）使用DRAMsim3或者ramlualtor2仿真</td></tr><tr><td><strong>面积</strong></td><td>（A）使用Cacti或NVSim仿真</td><td>（A）使用Cacti仿真</td></tr><tr><td><strong>功耗</strong></td><td>（A）使用Cacti或NVSim仿真</td><td>（A）使用DRAMsim3或者ramlualtor2仿真</td></tr><tr><td><strong>成本</strong></td><td>（B）一些论文比如..</td><td>（B）一些论文比如..</td></tr></tbody></table><p>使用Cacti和NVSim，可以得到一些常见配置的DRAM, SRAM的面积、功耗等数据。</p><ul><li>256KB SRAM相关数据：（来自NVSim）</li></ul><table><thead><tr><th>工艺 (nm)</th><th>22</th><th>32</th><th>45</th><th>65</th></tr></thead><tbody><tr><td>性能 (ps)</td><td>Read: 333.292, Write: 293.751</td><td>Read: 369.984, Write: 335.000</td><td>Read: 382.003, Write: 354.589</td><td>Read: 605.831, Write: 580.340</td></tr><tr><td>面积 (mm<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.988ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 436.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>)</td><td>0.174</td><td>0.371</td><td>0.734</td><td>1.532</td></tr><tr><td>功耗 (pJ per access)</td><td>Read: 63.733, Write: 60.251, Leak: 309.809 mW</td><td>Read: 98.298, Write: 92.862, Leak: 505.586 mW</td><td>Read: 163.025, Write: 153.712, Leak: 378.518 mW</td><td>Read: 296.696, Write: 279.795, Leak: 595.228 mW</td></tr><tr><td>带宽 (GB/s)</td><td>Read: 168.973, Write: 340.696</td><td>Read: 199.464, Write: 304.342</td><td>Read: 202.614, Write: 291.485</td><td>Read: 118.441, Write: 177.861</td></tr></tbody></table><ul><li>1GB DDR3 DRAM相关数据：（来自Cacti）</li></ul><table><thead><tr><th>工艺 (nm)</th><th>22</th><th>32</th><th>45</th><th>65</th></tr></thead><tbody><tr><td>性能 (ns)</td><td>17.25</td><td>20.12</td><td>22.9</td><td>29.6</td></tr><tr><td>面积 (mm<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.988ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 436.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>)</td><td>5.83</td><td>16.44</td><td>32.46</td><td>67.77</td></tr><tr><td>功耗 (nJ per access)</td><td>1.36</td><td>2.50</td><td>4.75</td><td>7.11</td></tr><tr><td>*带宽 (GB/s)</td><td>0.79</td><td>0.79</td><td>0.79</td><td>0.79</td></tr></tbody></table><blockquote><p>此处带宽采用<strong>带宽（GB/s）= 数据速率（MT/s） × 数据总线宽度（bit） / 8</strong>计算。</p></blockquote><ul><li>8GB 3D DRAM（4层堆叠，DDR3接口）相关数据：（来自Cacti）</li></ul><table><thead><tr><th>工艺 (nm)</th><th>22</th><th>32</th><th>45</th><th>65</th></tr></thead><tbody><tr><td>性能 (ns)</td><td>15.21</td><td>20.70</td><td>23.44</td><td>30.11</td></tr><tr><td>面积 (mm<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.988ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 436.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>)</td><td>12.09</td><td>34.05</td><td>67.28</td><td>140.44</td></tr><tr><td>功耗 (nJ per access)</td><td>0.635</td><td>1.257</td><td>1.944</td><td>3.756</td></tr><tr><td>*带宽 (GB/s)</td><td>3.2</td><td>3.2</td><td>3.2</td><td>3.2</td></tr></tbody></table><h2 id="互联类"><a href="#互联类" class="headerlink" title="互联类"></a>互联类</h2><p><strong>资源类别：</strong></p><table><thead><tr><th></th><th>Router</th><th>I/O Die</th><th>D2D接口</th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>（A）</td><td></td><td>（B）看论文</td></tr><tr><td><strong>面积</strong></td><td></td><td></td><td>（B）看论文</td></tr><tr><td><strong>功耗</strong></td><td></td><td></td><td>（B）看论文</td></tr><tr><td><strong>成本</strong></td><td></td><td></td><td>（B）看论文</td></tr></tbody></table><h3 id="NoC-Router"><a href="#NoC-Router" class="headerlink" title="NoC Router"></a>NoC Router</h3><ul><li><strong>工具</strong>：DSENT。</li></ul><p>下面是一些常见的结果。</p><ul><li>一些常见输入、输出端口路由器的<strong>功耗</strong>：（单位：W）</li></ul><table><thead><tr><th>输入（左侧）、输出（上侧）端口数</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>1</td><td>0.001020921</td><td>0.001046569</td><td>0.001072215</td><td>0.001097859</td><td>0.0011235</td><td>0.001149144</td><td>0.001174785</td></tr><tr><td>2</td><td>0.002018667</td><td>0.002056779</td><td>0.002094889</td><td>0.002132998</td><td>0.00217111</td><td>0.002210914</td><td>0.002249019</td></tr><tr><td>3</td><td>0.003023034</td><td>0.003075147</td><td>0.003127259</td><td>0.00318107</td><td>0.00323318</td><td>0.003285287</td><td>0.003337395</td></tr><tr><td>4</td><td>0.004033511</td><td>0.004101011</td><td>0.004166808</td><td>0.004232605</td><td>0.0042984</td><td>0.004365584</td><td>0.004431378</td></tr><tr><td>5</td><td>0.00505551</td><td>0.005137705</td><td>0.005219898</td><td>0.005303479</td><td>0.00538567</td><td>0.005467858</td><td>0.005550045</td></tr><tr><td>6</td><td>0.006083331</td><td>0.006182975</td><td>0.006281228</td><td>0.006379479</td><td>0.00647773</td><td>0.006575977</td><td>0.006677315</td></tr><tr><td>7</td><td>0.007121803</td><td>0.007237194</td><td>0.007352584</td><td>0.007467973</td><td>0.00758645</td><td>0.007701837</td><td>0.007817221</td></tr></tbody></table><ul><li>输入、输出端口数均为5的路由器的<strong>面积</strong>：0.3363 mm<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.988ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 436.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>。其余面积也可类似仿真获得。</li></ul><h3 id="D2D接口"><a href="#D2D接口" class="headerlink" title="D2D接口"></a>D2D接口</h3><ul><li><strong>方法</strong>：只能使用理论分析。</li><li><strong>性能、功耗</strong>数据：（来自[1]）</li></ul><p><img src="/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/image-20250729115146734.png"></p><ul><li><strong>面积</strong>数据：（12nm工艺，估算自[1], [2]）</li></ul><p>Adapter的面积数据 [1]：</p><p><img src="/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/image-20250729115432888.png"></p><p>再根据[2]中UCIe的微架构：</p><p><img src="/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/image-20250729120742926.png"></p><p>可以估算<strong>D2D接口的面积为：0.013mm<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.988ex" height="1.887ex" role="img" focusable="false" viewBox="0 -833.9 436.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"></g><g data-mml-node="mn" transform="translate(33,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>.</strong>（UCIe，12nm工艺）。</p><h3 id="I-O-die"><a href="#I-O-die" class="headerlink" title="I/O die"></a>I/O die</h3><p>依据[3]，基于AMD EPYC 芯片（14nm工艺），I/O die的<strong>面积</strong>为400 mm²，<strong>延迟</strong>为2–3 个 NoC 时钟周期（受芯片尺寸和硅中介层链路延迟影响），每个I/O 控制器的<strong>功耗</strong>为5W。依据[4]（15nm交换机，4μm互连），互联的<strong>功耗</strong>为0.063 pJ/bit，端到端<strong>延迟</strong>为20ns。</p><blockquote><p><strong>参考文献</strong>：</p><p>[1] Heterogeneous Die-to-Die Interfaces: Enabling More Flexible Chiplet Interconnection Systems (MICRO’23).</p><p>[2] Universal Chiplet Interconnect Express (UCIe): An Open Industry Standard for Innovations With Chiplets at Package Level.</p><p>[3] A Performance Analysis of Chiplet-Based Systems (DATE’25).</p><p>[4] FRED: A Wafer-scale Fabric for 3D Parallel DNN Training (ISCA’25)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计空间探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储结构之SRAM, DRAM和Memory Controller</title>
      <link href="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/"/>
      <url>/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/</url>
      
        <content type="html"><![CDATA[<h1 id="SRAM-DRAM和Memory-Controller"><a href="#SRAM-DRAM和Memory-Controller" class="headerlink" title="SRAM, DRAM和Memory Controller"></a>SRAM, DRAM和Memory Controller</h1><p>​在本节中，我们将重点关注SRAM, DRAM存储结构的物理实现，<strong>补充基础常识上的缺失</strong>（但不需要了解太深入，毕竟学的是计算机不是电路）。最后，给出<strong>SRAM, DRAM的性能、功耗、面积、成本评估方法。</strong>（这才是重点！）</p><h2 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h2><p>​SRAM无需刷新，速度快，支持非连续性访问，适合高速缓存（L1/L2 Cache），其性能通常优于DRAM。但其<strong>缺点</strong>是：无法避免软错误率（SER）和静态功耗，且具有易失性。</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719185934420.png"></p><h3 id="SRAM-Memory-Cell"><a href="#SRAM-Memory-Cell" class="headerlink" title="SRAM Memory Cell"></a>SRAM Memory Cell</h3><p>​SRAM由能够存储1 bit的Memory Cell单元（两个交叉耦合的反相器 + 两个访问晶体管）组成。</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719184508940.png"></p><p>其中，两个交叉耦合的反相器有不同的实现方法，如Full-CMOS 6TMC，TFT-PMOS MC等。</p><blockquote><p>**备注：**一些基本结构和术语：</p><ul><li><strong>WL（Word Line，字线）</strong>：水平方向的金属线，连接<strong>一行所有Memory Cell</strong>的<strong>访问晶体管栅极</strong>（Gate）。当WL被激活（高电平）时，该行所有细胞的访问晶体管导通，细胞内存储的数据会传输到对应的位线对（BL/BLB）。</li><li><strong>BL（Bit Line，位线）与BLB（Bit Line Bar，反相位线）</strong>： 垂直方向的一对互补金属线，连接<strong>一列所有Memory Cell</strong>的<strong>访问晶体管源极/漏极</strong>（Source/Drain）。<ul><li><strong>BL</strong>：传输细胞存储的<strong>原始信号</strong>（如存储“1”时，BL为高电平）；</li><li><strong>BLB</strong>：传输<strong>BL的反相信号</strong>（如存储“1”时，BLB为低电平）； 两者形成<strong>差分信号</strong>（BL - BLB），目的是<strong>提高抗噪声能力</strong>（共模噪声会同时影响BL和BLB，差分信号不受其干扰）。</li></ul></li><li><strong>SA（Sense Amplifier， sense放大器）</strong>： 连接在每列BL/BLB的末端，用于<strong>放大微小的差分信号</strong>。</li></ul></blockquote><h3 id="地址译码"><a href="#地址译码" class="headerlink" title="地址译码"></a>地址译码</h3><p>​地址译码的本质是<strong>将输入的二进制地址转换为选中特定存储单元的控制信号</strong>，关键目标是<strong>高效激活目标行（字线）<strong>和</strong>选择目标列（位线）</strong>。分为下面几步：</p><ul><li><strong>预译码（Predecoding）</strong>：将行地址拆分为多个子集（如8位行地址拆分为两个4位子集），用低扇入门（如4输入AND）生成预译码信号（16个信号/子集）。这是为了减少高扇入门的数量。</li><li><strong>行译码（Row Decoding）</strong>：将预译码信号组合（如2输入AND）生成<strong>全局字线（GWL）</strong>，再结合<strong>块选择信号</strong>（Block Select）生成<strong>局部字线（LWL）</strong>（Divided Wordline, DWL技术），激活目标行的所有存储单元。</li><li><strong>列译码（Column Decoding）</strong>：将列地址译码，通过**多路复用器（MUX）**选择目标列，连接到sense放大器或写入电路。</li></ul><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719192032806.png"></p><h2 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h2><p>​与SRAM不同，DRAM需定期刷新（dynamic），读写速度慢，适合作为主存。（但同样具有易失性）</p><h3 id="DRAM-1T1C-Cell"><a href="#DRAM-1T1C-Cell" class="headerlink" title="DRAM 1T1C Cell"></a>DRAM 1T1C Cell</h3><p>​DRAM以<strong>1T1C存储单元</strong>（1个晶体管+1个电容）作为存储的基本单元。</p><h3 id="地址译码-1"><a href="#地址译码-1" class="headerlink" title="地址译码"></a>地址译码</h3><p>​DRAM的译码过程可以分为下面几步：</p><ul><li><strong>行译码</strong>：行地址（如12位）通过<strong>行译码器</strong>激活对应的<strong>字线</strong>，选中一行的所有存储单元；</li><li><strong>列译码</strong>：列地址（如10位）通过<strong>列译码器</strong>选择对应的<strong>位线</strong>，连接到sense放大器或写入电路；</li><li><strong>Bank Selection</strong>：现代DRAM包含多个<strong>Bank</strong>，地址中的<strong>Bank ID</strong>选择目标bank，实现并行操作（提高带宽）。</li></ul><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719193007174.png"></p><blockquote><p><strong>地址复用（Address Multiplexing）</strong>：DRAM的地址线是<strong>复用</strong>的（行地址与列地址共用同一组引脚），因此需通过**行地址 strobe（RAS#）<strong>和</strong>列地址 strobe（CAS#）**信号区分。</p></blockquote><h2 id="DRAM-Memory-Controller"><a href="#DRAM-Memory-Controller" class="headerlink" title="DRAM Memory Controller"></a>DRAM Memory Controller</h2><p>​DRAM内存控制器起到“承上启下”的作用：（1）向上仲裁（CPU/I/O）竞争访问权；（2）向下管理调度各DRAM的访问。其核心架构为：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719193646279.png"></p><p>一些设计要点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">                      +-----------------+</span><br><span class="line">CPU/I/O Requests →  | 请求仲裁逻辑     | → 胜出请求进入地址映射</span><br><span class="line">                      +-----------------+</span><br><span class="line">                                                ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 地址映射引擎     | → 输出 (Channel, Rank, Bank, Row, Column)</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | DRAM命令生成器   | → 生成 ACT/READ/WRITE/PRE 序列</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 命令调度队列     | → 按策略排序命令 (FIFO/按库/按优先级)</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 电气接口驱动     | → 满足时序约束的DRAM信号输出</span><br><span class="line">                                  +-----------------+</span><br></pre></td></tr></table></figure><p>可以类比操作系统的管理：各个DRAM“类似于”各个进程（或者“库”），DRAM Memory Controller“类似于”OS。于是不难理解，其<strong>调度算法</strong>包含轮询 (Round-Robin)，最长队列优先 (LQF)，最早到期优先 (EDF)等。  </p><h2 id="SRAM-DRAM-Modeling"><a href="#SRAM-DRAM-Modeling" class="headerlink" title="SRAM, DRAM Modeling"></a>SRAM, DRAM Modeling</h2><h3 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h3><h4 id="评估原理"><a href="#评估原理" class="headerlink" title="评估原理"></a>评估原理</h4><p>所谓性能，其实就是读、写数据的<strong>延迟（消耗时间）</strong>。以一个DRAM做L4 LLC的系统为例，访问SRAM, DRAM的过程如下图：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250721152125483.png"></p><p>该系统的一些参数以及一些常识性的结果如下：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250721153534548.png"></p><p>以一次访问DRAM为例，访问过程如下：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250721154434002.png"></p><p>上图访问过程就是评估的原理，真实刻画了访问数据的延迟构成。</p><h4 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h4><ul><li>使用仿真工具：使用DRAM-sim可以快捷得到访问时间。</li><li>或者使用一些论文的模型、公式：比如zy学姐的论文On Design Space Exploration of Cache System in Multi-Chiplet Systems (DAC’25)。</li></ul><h3 id="面积、功耗评估"><a href="#面积、功耗评估" class="headerlink" title="面积、功耗评估"></a>面积、功耗评估</h3><p>具体的评估原理就略去了。只需要知道<strong>仿真工具Cacti</strong>即可。</p><h3 id="成本评估"><a href="#成本评估" class="headerlink" title="成本评估"></a>成本评估</h3><p>具体的评估原理就略去了。看论文里面的modeling。</p><blockquote><p><strong>参考文献</strong>：</p><ul><li>Memory Systems (Cache, DRAM, Disk).</li><li>Reducing Latency in an SRAM/DRAM Cache Hierarchy via a Novel Tag-Cache Architecture (DAC’14).</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D集成芯片</title>
      <link href="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/"/>
      <url>/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="3D集成芯片"><a href="#3D集成芯片" class="headerlink" title="3D集成芯片"></a>3D集成芯片</h1><h2 id="3D集成与封装技术"><a href="#3D集成与封装技术" class="headerlink" title="3D集成与封装技术"></a>3D集成与封装技术</h2><h3 id="从2D-IC到3D-IC"><a href="#从2D-IC到3D-IC" class="headerlink" title="从2D IC到3D IC"></a>从2D IC到3D IC</h3><table><thead><tr><th align="center"><strong>维度</strong></th><th align="center"><strong>2D IC</strong></th><th align="center"><strong>3D IC</strong></th></tr></thead><tbody><tr><td align="center"><strong>结构</strong></td><td align="center">单层平面布局</td><td align="center">多层垂直堆叠（逻辑层、缓存层、DRAM层等）</td></tr><tr><td align="center"><strong>互连方式</strong></td><td align="center">金属线水平绕行（长距离，高RC延迟）</td><td align="center">TSV垂直直连（短距离，低RC延迟）</td></tr><tr><td align="center"><strong>互连密度</strong></td><td align="center">受限于引脚数量（带宽瓶颈）</td><td align="center">TSV密度 <strong>&gt;1000个/mm²</strong>（高带宽）</td></tr><tr><td align="center"><strong>成本、散热</strong></td><td align="center">成本低，散热快</td><td align="center">成本高，散热慢</td></tr></tbody></table><h3 id="3D封装技术"><a href="#3D封装技术" class="headerlink" title="3D封装技术"></a>3D封装技术</h3><p>​<strong>3D封装技术</strong>通过封装级堆叠独立芯片（如Apple A8处理器堆叠CPU与DRAM），使用引线键合（Wire Bonding）或微凸块连接，通信依赖<strong>片外信号</strong>。常见的有2种：</p><p><img src="/./3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/image-20250719140544510.png"></p><h3 id="3D集成技术"><a href="#3D集成技术" class="headerlink" title="3D集成技术"></a>3D集成技术</h3><p>​该技术产生的是<strong>3D IC</strong>，通过<strong>硅通孔（TSV）</strong> 实现层间垂直互联，提供<strong>片内级</strong>高密度连接（微米级间距）。该技术具有下面的优势：</p><ul><li><strong>线长缩减（Wire Length Reduction）</strong>：带来通信延迟、功耗的减少。</li><li><strong>内存带宽提升（Memory Bandwidth Improvement）</strong>：使用3D架构，可以<strong>堆叠DRAM作末级缓存（LLC）<strong>或者</strong>堆叠DRAM作主存</strong>。</li><li><strong>垂直异构集成（Heterogeneous Integration）</strong>：不同功能层（逻辑/存储/光子）可独立制造，通过TSV互联。</li><li><strong>成本效益（Cost-effective Architecture）</strong>：分割大芯片为小芯片堆叠，提升总体良率。（然而TSV会增加成本）</li></ul><h2 id="3D堆叠处理器设计"><a href="#3D堆叠处理器设计" class="headerlink" title="3D堆叠处理器设计"></a>3D堆叠处理器设计</h2><h2 id="3D-NoC设计"><a href="#3D-NoC设计" class="headerlink" title="3D NoC设计"></a>3D NoC设计</h2><h2 id="3D散热模型"><a href="#3D散热模型" class="headerlink" title="3D散热模型"></a>3D散热模型</h2><h2 id="3D成本模型"><a href="#3D成本模型" class="headerlink" title="3D成本模型"></a>3D成本模型</h2><blockquote><p><strong>参考文献</strong>：Die-stacking Architecture.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
