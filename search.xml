<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多芯粒系统的互联结构</title>
      <link href="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/"/>
      <url>/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="多芯粒系统的互联结构"><a href="#多芯粒系统的互联结构" class="headerlink" title="多芯粒系统的互联结构"></a>多芯粒系统的互联结构</h1><p>本节主要关注多芯粒系统中用于互联、通信的3种结构：<strong>（1）路由器；（2）跨芯粒D2D接口；（3）I/O Die。<strong>下面将梳理其大致物理架构，重点关注</strong>如何评估其性能、功耗、面积、成本（以为DSE服务）。</strong></p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p><img src="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/image-20250723101107798.png"></p><h2 id="D2D接口"><a href="#D2D接口" class="headerlink" title="D2D接口"></a>D2D接口</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>可以把芯粒间的die-to-die接口分为2层：<strong>物理层（physical layer (PHY)）和协议层（protocol layer (Adapter)）</strong>。（当然也有人分为3层，比如《Chiplet互连标准UCIe》，但本质相同）常见的D2D接口分为2类：</p><ul><li><strong>串行接口（serial interface）</strong>：特点是high-data-rate, long-reach, high-latency, high-power，例如SerDes；</li><li><strong>并行接口（parallel interface）</strong>：特点是low-power, low-latency, short-reach, low-data-rate, and high-port-count (costly)，例如AIB, OpenHBI。</li></ul><p><img src="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/image-20250723144607084.png" alt="image-20250723144607084"></p><p>下图是两种接口的微架构。描述了数据包flit跨芯粒传输的过程：从原芯粒某个核的router出发，经过adapter（协议层），随后进入片外的PHY（物理层），传输到达目标芯粒的PHY，然后重新进入adapter转变信号格式，最后到达目标核的router，进入目标核。</p><p><img src="/2025/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/%E5%A4%9A%E8%8A%AF%E7%B2%92%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%92%E8%81%94%E7%BB%93%E6%9E%84/image-20250723140342567.png"></p><p>除此之外，还有一些基于更先进封装技术（如2.5D）的接口，比如BoW, UCIe，可以看成是串行接口和并行接口的结合。</p><blockquote><p><strong>注</strong>：同一个接口（同一PHY）上支持运行不同的协议，比如Compute Express Link (CXL), PCI Express, Ethernet protocols 可以在 SerDes PHY 上同时运行。</p></blockquote><h3 id="性能模型"><a href="#性能模型" class="headerlink" title="性能模型"></a>性能模型</h3><blockquote><p>参考文献：</p><ul><li>Heterogeneous Die-to-Die Interfaces: Enabling More Flexible Chiplet Interconnection Systems (MICRO’23).</li><li>On-Chip Networks, second edition.</li><li></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM加速芯片DSE（1）：硬件变量</title>
      <link href="/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/"/>
      <url>/2025/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/LLM%E5%8A%A0%E9%80%9F%E8%8A%AF%E7%89%87DSE%EF%BC%881%EF%BC%89%EF%BC%9A%E7%A1%AC%E4%BB%B6%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="LLM推理加速芯片DSE（1）：硬件变量"><a href="#LLM推理加速芯片DSE（1）：硬件变量" class="headerlink" title="LLM推理加速芯片DSE（1）：硬件变量"></a>LLM推理加速芯片DSE（1）：硬件变量</h1><p>设计芯片就像“盖楼”：在给定“地皮面积”（或者预算成本）的约束下，怎么规划盖楼，会使得性能（或者某个指标）最优？这就是DSE的意义。考虑片上面积给定的约束条件，有3类资源会占据片上面积：计算资源、存储资源、互联资源，因此DSE的工作经常将它们作为变量进行设计空间探索。这就是<strong>硬件变量</strong>。</p><blockquote><p><strong>评估指标</strong>：性能（执行时间），面积，功耗（或者散热），成本。</p><p><strong>评估方法</strong>：（A） 使用仿真器或者真机跑数据；（B）使用论文中的model进行量化计算。</p></blockquote><h2 id="计算类"><a href="#计算类" class="headerlink" title="计算类"></a>计算类</h2><p>PE。</p><h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h2><p><strong>资源类别：</strong></p><table><thead><tr><th></th><th>SRAM</th><th>DRAM</th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>（A）结合具体架构去计算，或者使用Cacti仿真</td><td>（A）结合具体架构去计算，或者使用DRAMsim3仿真</td></tr><tr><td><strong>面积</strong></td><td>（A）使用Cacti仿真</td><td>（A）使用DRAMsim3仿真</td></tr><tr><td><strong>功耗</strong></td><td>（A）使用Cacti仿真</td><td>（A）使用DRAMsim3仿真</td></tr><tr><td><strong>成本</strong></td><td>（B）一些论文比如..</td><td>（B）一些论文比如..</td></tr></tbody></table><p>下面是更详细的展开。</p><h3 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h3><ul><li><p><strong>性能</strong>：结合结构去计算或者仿真。具体结构参考之前的文章：《SRAM, DRAM和Memory Controller》。</p></li><li><p><strong>Cacti仿真工具</strong>：输入是<code>.cfg</code>的cache配置文件，输出主要包含<strong>Power, delay, area, and cycle time model</strong> for 1. direct mapped caches, 2. set-associative caches, 3. fully associative caches, 4. Embedded DRAM memories, 5. Commodity DRAM memories.支持UCA和NUCA访问模式。示例输出如下：（<code>ddr3_cache.cfg</code>）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line">Cache size                    : 8388608</span><br><span class="line">Block size                    : 64</span><br><span class="line">Associativity                 : 8</span><br><span class="line">Read only ports               : 0</span><br><span class="line">Write only ports              : 0</span><br><span class="line">Read write ports              : 1</span><br><span class="line">Single ended read ports       : 0</span><br><span class="line">Cache banks (UCA)             : 1</span><br><span class="line">Technology                    : 0.022</span><br><span class="line">Temperature                   : 360</span><br><span class="line">Tag size                      : 42</span><br><span class="line">array type                    : Cache</span><br><span class="line">Model as memory               : 0</span><br><span class="line">Model as 3D memory               : 0</span><br><span class="line">Access mode                   : 0</span><br><span class="line">Data array cell type          : 0</span><br><span class="line">Data array peripheral type    : 0</span><br><span class="line">Tag array cell type           : 0</span><br><span class="line">Tag array peripheral type     : 0</span><br><span class="line">Optimization target           : 2</span><br><span class="line">Design objective (UCA wt)     : 0 0 0 100 0</span><br><span class="line">Design objective (UCA dev)    : 20 100000 100000 100000 100000</span><br><span class="line">Cache model                   : 0</span><br><span class="line">Nuca bank                     : 0</span><br><span class="line">Wire inside mat               : 1</span><br><span class="line">Wire outside mat              : 1</span><br><span class="line">Interconnect projection       : 1</span><br><span class="line">Wire signaling               : 1</span><br><span class="line">Print level                   : 1</span><br><span class="line">ECC overhead                  : 1</span><br><span class="line">Page size                     : 8192</span><br><span class="line">Burst length                  : 8</span><br><span class="line">Internal prefetch width       : 8</span><br><span class="line">Force cache config            : 0</span><br><span class="line">Subarray Driver direction       : 1</span><br><span class="line">iostate                       : READ</span><br><span class="line">dram_ecc                      : NO_ECC</span><br><span class="line">io_type                     : DDR3</span><br><span class="line">dram_dimm                      : UDIMM</span><br><span class="line">IO Area (sq.mm) = inf</span><br><span class="line">IO Timing Margin (ps) = 35.8333</span><br><span class="line">IO Votlage Margin (V) = 0.155</span><br><span class="line">IO Dynamic Power (mW) = 1282.42 PHY Power (mW) = 232.752 PHY Wakeup Time (us) = 27.503</span><br><span class="line">IO Termination and Bias Power (mW) = 3136.7</span><br><span class="line"></span><br><span class="line">---------- CACTI (version 7.0.3DD Prerelease of Aug, 2012), Uniform Cache Access SRAM Model ----------</span><br><span class="line"></span><br><span class="line">Cache Parameters:</span><br><span class="line">    Total cache size (bytes): 8388608</span><br><span class="line">    Number of banks: 1</span><br><span class="line">    Associativity: 8</span><br><span class="line">    Block size (bytes): 64</span><br><span class="line">    Read/write Ports: 1</span><br><span class="line">    Read ports: 0</span><br><span class="line">    Write ports: 0</span><br><span class="line">    Technology size (nm): 22</span><br><span class="line"></span><br><span class="line">    Access time (ns): 3.03414</span><br><span class="line">    Cycle time (ns):  1.84197</span><br><span class="line">    Total dynamic read energy per access (nJ): 0.381869</span><br><span class="line">    Total dynamic write energy per access (nJ): 0.446873</span><br><span class="line">    Total leakage power of a bank (mW): 2520.29</span><br><span class="line">    Total gate leakage power of a bank (mW): 4.71441</span><br><span class="line">    Cache height x width (mm): 3.07383 x 2.89775</span><br><span class="line"></span><br><span class="line">    Best Ndwl : 8</span><br><span class="line">    Best Ndbl : 8</span><br><span class="line">    Best Nspd : 2</span><br><span class="line">    Best Ndcm : 1</span><br><span class="line">    Best Ndsam L1 : 8</span><br><span class="line">    Best Ndsam L2 : 1</span><br><span class="line"></span><br><span class="line">    Best Ntwl : 16</span><br><span class="line">    Best Ntbl : 8</span><br><span class="line">    Best Ntspd : 8</span><br><span class="line">    Best Ntcm : 1</span><br><span class="line">    Best Ntsam L1 : 8</span><br><span class="line">    Best Ntsam L2 : 2</span><br><span class="line">    Data array, H-tree wire type: Global wires with 30% delay penalty</span><br><span class="line">    Tag array, H-tree wire type: Global wires with 30% delay penalty</span><br><span class="line"></span><br><span class="line">Time Components:</span><br><span class="line"></span><br><span class="line">  Data side (with Output driver) (ns): 3.03414</span><br><span class="line">        H-tree input delay (ns): 0.860695</span><br><span class="line">        Decoder + wordline delay (ns): 0.607741</span><br><span class="line">        Bitline delay (ns): 0.473783</span><br><span class="line">        Sense Amplifier delay (ns): 0.00189739</span><br><span class="line">        H-tree output delay (ns): 1.09002</span><br><span class="line"></span><br><span class="line">  Tag side (with Output driver) (ns): 0.866708</span><br><span class="line">        H-tree input delay (ns): 0.250295</span><br><span class="line">        Decoder + wordline delay (ns): 0.0962495</span><br><span class="line">        Bitline delay (ns): 0.078</span><br><span class="line">        Sense Amplifier delay (ns): 0.00189739</span><br><span class="line">        Comparator delay (ns): 0.0162774</span><br><span class="line">        H-tree output delay (ns): 0.440265</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Power Components:</span><br><span class="line"></span><br><span class="line">  Data array: Total dynamic read energy/access  (nJ): 0.360657</span><br><span class="line">        Total energy in H-tree (that includes both address and data transfer) (nJ): 0.270396</span><br><span class="line">        Output Htree inside bank Energy (nJ): 0.263979</span><br><span class="line">        Decoder (nJ): 0.000237668</span><br><span class="line">        Wordline (nJ): 0.000275334</span><br><span class="line">        Bitline mux &amp; associated drivers (nJ): 0</span><br><span class="line">        Sense amp mux &amp; associated drivers (nJ): 0</span><br><span class="line">        Bitlines precharge and equalization circuit (nJ): 0.00163006</span><br><span class="line">        Bitlines (nJ): 0.0612354</span><br><span class="line">        Sense amplifier energy (nJ): 0.0018371</span><br><span class="line">        Sub-array output driver (nJ): 0.0249178</span><br><span class="line">        Total leakage power of a bank (mW): 2357.99</span><br><span class="line">        Total leakage power in H-tree (that includes both address and data network) ((mW)): 18.9776</span><br><span class="line">        Total leakage power in cells (mW): 0</span><br><span class="line">        Total leakage power in row logic(mW): 0</span><br><span class="line">        Total leakage power in column logic(mW): 0</span><br><span class="line">        Total gate leakage power in H-tree (that includes both address and data network) ((mW)): 0.0916133</span><br><span class="line"></span><br><span class="line">  Tag array:  Total dynamic read energy/access (nJ): 0.0212128</span><br><span class="line">        Total leakage read/write power of a bank (mW): 162.298</span><br><span class="line">        Total energy in H-tree (that includes both address and data transfer) (nJ): 0.00268136</span><br><span class="line">        Output Htree inside a bank Energy (nJ): 0.00104879</span><br><span class="line">        Decoder (nJ): 0.000585105</span><br><span class="line">        Wordline (nJ): 0.000356972</span><br><span class="line">        Bitline mux &amp; associated drivers (nJ): 0</span><br><span class="line">        Sense amp mux &amp; associated drivers (nJ): 0.000288214</span><br><span class="line">        Bitlines precharge and equalization circuit (nJ): 0.00153419</span><br><span class="line">        Bitlines (nJ): 0.0132631</span><br><span class="line">        Sense amplifier energy (nJ): 0.00155643</span><br><span class="line">        Sub-array output driver (nJ): 8.13397e-05</span><br><span class="line">        Total leakage power of a bank (mW): 162.298</span><br><span class="line">        Total leakage power in H-tree (that includes both address and data network) ((mW)): 0.23223</span><br><span class="line">        Total leakage power in cells (mW): 0</span><br><span class="line">        Total leakage power in row logic(mW): 0</span><br><span class="line">        Total leakage power in column logic(mW): 0</span><br><span class="line">        Total gate leakage power in H-tree (that includes both address and data network) ((mW)): 0.00146699</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Area Components:</span><br><span class="line"></span><br><span class="line">  Data array: Area (mm2): 7.28836</span><br><span class="line">        Height (mm): 3.07383</span><br><span class="line">        Width (mm): 2.3711</span><br><span class="line">        Area efficiency (Memory cell area/Total area) - 73.1983 %</span><br><span class="line">                MAT Height (mm): 0.716448</span><br><span class="line">                MAT Length (mm): 0.540768</span><br><span class="line">                Subarray Height (mm): 0.328909</span><br><span class="line">                Subarray Length (mm): 0.26532</span><br><span class="line"></span><br><span class="line">  Tag array: Area (mm2): 0.377107</span><br><span class="line">        Height (mm): 0.716051</span><br><span class="line">        Width (mm): 0.526648</span><br><span class="line">        Area efficiency (Memory cell area/Total area) - 74.9106 %</span><br><span class="line">                MAT Height (mm): 0.173381</span><br><span class="line">                MAT Length (mm): 0.063873</span><br><span class="line">                Subarray Height (mm): 0.0822272</span><br><span class="line">                Subarray Length (mm): 0.027995</span><br><span class="line"></span><br><span class="line">Wire Properties:</span><br><span class="line"></span><br><span class="line">  Delay Optimal</span><br><span class="line">        Repeater size - 42.0297 </span><br><span class="line">        Repeater spacing - 0.0329013 (mm) </span><br><span class="line">        Delay - 0.216837 (ns/mm) </span><br><span class="line">        PowerD - 0.000279845 (nJ/mm) </span><br><span class="line">        PowerL - 0.0215298 (mW/mm) </span><br><span class="line">        PowerLgate - 9.15623e-05 (mW/mm)</span><br><span class="line">        Wire width - 0.022 microns</span><br><span class="line">        Wire spacing - 0.022 microns</span><br><span class="line"></span><br><span class="line">  5% Overhead</span><br><span class="line">        Repeater size - 17.0297 </span><br><span class="line">        Repeater spacing - 0.0329013 (mm) </span><br><span class="line">        Delay - 0.226875 (ns/mm) </span><br><span class="line">        PowerD - 0.0001818 (nJ/mm) </span><br><span class="line">        PowerL - 0.00872349 (mW/mm) </span><br><span class="line">        PowerLgate - 3.70994e-05 (mW/mm)</span><br><span class="line">        Wire width - 0.022 microns</span><br><span class="line">        Wire spacing - 0.022 microns</span><br><span class="line"></span><br><span class="line">  10% Overhead</span><br><span class="line">        Repeater size - 15.0297 </span><br><span class="line">        Repeater spacing - 0.0329013 (mm) </span><br><span class="line">        Delay - 0.235988 (ns/mm) </span><br><span class="line">        PowerD - 0.000174237 (nJ/mm) </span><br><span class="line">        PowerL - 0.00769899 (mW/mm) </span><br><span class="line">        PowerLgate - 3.27424e-05 (mW/mm)</span><br><span class="line">        Wire width - 0.022 microns</span><br><span class="line">        Wire spacing - 0.022 microns</span><br><span class="line"></span><br><span class="line">  20% Overhead</span><br><span class="line">        Repeater size - 12.0297 </span><br><span class="line">        Repeater spacing - 0.0329013 (mm) </span><br><span class="line">        Delay - 0.257722 (ns/mm) </span><br><span class="line">        PowerD - 0.00016297 (nJ/mm) </span><br><span class="line">        PowerL - 0.00616223 (mW/mm) </span><br><span class="line">        PowerLgate - 2.62069e-05 (mW/mm)</span><br><span class="line">        Wire width - 0.022 microns</span><br><span class="line">        Wire spacing - 0.022 microns</span><br><span class="line"></span><br><span class="line">  30% Overhead</span><br><span class="line">        Repeater size - 10.0297 </span><br><span class="line">        Repeater spacing - 0.0329013 (mm) </span><br><span class="line">        Delay - 0.28134 (ns/mm) </span><br><span class="line">        PowerD - 0.000155511 (nJ/mm) </span><br><span class="line">        PowerL - 0.00513773 (mW/mm) </span><br><span class="line">        PowerLgate - 2.18498e-05 (mW/mm)</span><br><span class="line">        Wire width - 0.022 microns</span><br><span class="line">        Wire spacing - 0.022 microns</span><br><span class="line"></span><br><span class="line">  Low-swing wire (1 mm) - Note: Unlike repeated wires, </span><br><span class="line">        delay and power values of low-swing wires do not</span><br><span class="line">        have a linear relationship with length. </span><br><span class="line">        delay - 0.0902442 (ns) </span><br><span class="line">        powerD - 2.8399e-06 (nJ) </span><br><span class="line">        PowerL - 1.71796e-07 (mW) </span><br><span class="line">        PowerLgate - 1.29017e-09 (mW)</span><br><span class="line">        Wire width - 4.4e-08 microns</span><br><span class="line">        Wire spacing - 4.4e-08 microns</span><br></pre></td></tr></table></figure><blockquote><p>随着3D芯片架构的推出，Cacti的魔改版本：Cacti-3D应运而生（Die Stacking Architecture）。本质上是仿真器多了2个变量：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="6.714ex" height="2.213ex" role="img" focusable="false" viewBox="0 -683 2967.6 978"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(836,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(1290.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1735.1,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(836,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，分别是WordLine和BitLine Partition的数目。</p></blockquote><h3 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h3><h2 id="互联类"><a href="#互联类" class="headerlink" title="互联类"></a>互联类</h2><p><strong>资源类别：</strong></p><table><thead><tr><th></th><th>Router</th><th>I/O Die</th><th>串线并线</th><th>TSV</th></tr></thead><tbody><tr><td><strong>性能</strong></td><td>（A）</td><td></td><td></td><td></td></tr><tr><td><strong>面积</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>功耗</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>成本</strong></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>关于架构的分析可见文章《多芯粒系统的互联结构》。下面着重展开仿真器的使用。</p><h3 id="NoC路由器"><a href="#NoC路由器" class="headerlink" title="NoC路由器"></a>NoC路由器</h3><ul><li><strong>工具</strong>：DSENT。</li><li><strong>使用</strong>：例如，仿真下面配置的路由器：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Number of input ports</span><br><span class="line">NumberInputPorts                        = 5</span><br><span class="line"># Number of output ports</span><br><span class="line">NumberOutputPorts                       = 5</span><br><span class="line"># Flit width (bit)</span><br><span class="line">NumberBitsPerFlit                       = 256</span><br></pre></td></tr></table></figure><p>会得到如下的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Energy&gt;&gt;Router:WriteBuffer = 1.17578e-11 (1.17578e-11 * 1)</span><br><span class="line">Energy&gt;&gt;Router:ReadBuffer = 1.09932e-11 (1.09932e-11 * 1)</span><br><span class="line">Energy&gt;&gt;Router:TraverseCrossbar-&gt;Multicast1 = 4.23108e-12 (4.23108e-12 * 1)</span><br><span class="line">Energy&gt;&gt;Router:ArbitrateSwitch-&gt;ArbitrateStage1 = 1.3333e-13 (1.3333e-13 * 1)</span><br><span class="line">Energy&gt;&gt;Router:ArbitrateSwitch-&gt;ArbitrateStage2 = 1.3333e-13 (1.3333e-13 * 1)</span><br><span class="line">Energy&gt;&gt;Router:DistributeClock = 1.70245e-12 (1.70245e-12 * 1)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;InputPort:Leakage = 0.0693412 (0.0138682 * 5)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;SwitchAllocator:Leakage = 0.000503571 (0.000503571 * 1)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;Crossbar:Leakage = 0.00333238 (0.00333238 * 1)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;Crossbar_Sel_DFF:Leakage = 2.44238e-05 (1.62825e-06 * 15)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;ClockTree:Leakage = 3.09859e-05 (3.09859e-05 * 1)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg0:Leakage = 0.00208416 (1.62825e-06 * 1280)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg1:Leakage = 0.00208416 (1.62825e-06 * 1280)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg2_0:Leakage = 0.000416833 (1.62825e-06 * 256)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg2_1:Leakage = 0.000416833 (1.62825e-06 * 256)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg2_2:Leakage = 0.000416833 (1.62825e-06 * 256)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg2_3:Leakage = 0.000416833 (1.62825e-06 * 256)</span><br><span class="line">NddPower&gt;&gt;Router:Leakage-&gt;PipelineReg2_4:Leakage = 0.000416833 (1.62825e-06 * 256)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;InputPort:Active = 2.35064e-07 (4.70128e-08 * 5)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;SwitchAllocator:Active = 1.6016e-09 (1.6016e-09 * 1)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;Crossbar:Active = 7.93003e-08 (7.93003e-08 * 1)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;Crossbar_Sel_DFF:Active = 7.92e-11 (5.28e-12 * 15)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;ClockTree:Active = 7.2512e-11 (7.2512e-11 * 1)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg0:Active = 6.7584e-09 (5.28e-12 * 1280)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg1:Active = 6.7584e-09 (5.28e-12 * 1280)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg2_0:Active = 1.35168e-09 (5.28e-12 * 256)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg2_1:Active = 1.35168e-09 (5.28e-12 * 256)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg2_2:Active = 1.35168e-09 (5.28e-12 * 256)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg2_3:Active = 1.35168e-09 (5.28e-12 * 256)</span><br><span class="line">Area&gt;&gt;Router:Active-&gt;PipelineReg2_4:Active = 1.35168e-09 (5.28e-12 * 256)</span><br><span class="line">Buffer:</span><br><span class="line">    Dynamic power: 3.412639e-02</span><br><span class="line">    Leakage power: 7.350950e-02</span><br><span class="line">Crossbar:</span><br><span class="line">    Dynamic power: 6.346623e-03</span><br><span class="line">    Leakage power: 5.416548e-03</span><br><span class="line">Switch allocator:</span><br><span class="line">    Dynamic power: 3.999901e-04</span><br><span class="line">    Leakage power: 5.035709e-04</span><br><span class="line">Clock:</span><br><span class="line">    Dynamic power: 1.702453e-03</span><br><span class="line">    Leakage power: 3.098588e-05</span><br><span class="line">Total:</span><br><span class="line">    Dynamic power: 4.257545e-02</span><br><span class="line">    Leakage power: 7.948502e-02</span><br><span class="line">Area:</span><br><span class="line">    Buffer:           2.485806e-07</span><br><span class="line">    Crossbar:         8.606400e-08</span><br><span class="line">    Switch allocator: 1.601600e-09</span><br><span class="line">    Other:            7.251200e-11</span><br></pre></td></tr></table></figure><p>包含各部分的功耗和面积。</p><h3 id="D2D接口"><a href="#D2D接口" class="headerlink" title="D2D接口"></a>D2D接口</h3><ul><li><strong>方法</strong>：只能使用理论分析。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计空间探索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储结构之SRAM, DRAM和Memory Controller</title>
      <link href="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/"/>
      <url>/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/</url>
      
        <content type="html"><![CDATA[<h1 id="SRAM-DRAM和Memory-Controller"><a href="#SRAM-DRAM和Memory-Controller" class="headerlink" title="SRAM, DRAM和Memory Controller"></a>SRAM, DRAM和Memory Controller</h1><p>​在本节中，我们将重点关注SRAM, DRAM存储结构的物理实现，<strong>补充基础常识上的缺失</strong>（但不需要了解太深入，毕竟学的是计算机不是电路）。最后，给出<strong>SRAM, DRAM的性能、功耗、面积、成本评估方法。</strong>（这才是重点！）</p><h2 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h2><p>​SRAM无需刷新，速度快，支持非连续性访问，适合高速缓存（L1/L2 Cache），其性能通常优于DRAM。但其<strong>缺点</strong>是：无法避免软错误率（SER）和静态功耗，且具有易失性。</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719185934420.png"></p><h3 id="SRAM-Memory-Cell"><a href="#SRAM-Memory-Cell" class="headerlink" title="SRAM Memory Cell"></a>SRAM Memory Cell</h3><p>​SRAM由能够存储1 bit的Memory Cell单元（两个交叉耦合的反相器 + 两个访问晶体管）组成。</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719184508940.png"></p><p>其中，两个交叉耦合的反相器有不同的实现方法，如Full-CMOS 6TMC，TFT-PMOS MC等。</p><blockquote><p>**备注：**一些基本结构和术语：</p><ul><li><strong>WL（Word Line，字线）</strong>：水平方向的金属线，连接<strong>一行所有Memory Cell</strong>的<strong>访问晶体管栅极</strong>（Gate）。当WL被激活（高电平）时，该行所有细胞的访问晶体管导通，细胞内存储的数据会传输到对应的位线对（BL/BLB）。</li><li><strong>BL（Bit Line，位线）与BLB（Bit Line Bar，反相位线）</strong>： 垂直方向的一对互补金属线，连接<strong>一列所有Memory Cell</strong>的<strong>访问晶体管源极/漏极</strong>（Source/Drain）。<ul><li><strong>BL</strong>：传输细胞存储的<strong>原始信号</strong>（如存储“1”时，BL为高电平）；</li><li><strong>BLB</strong>：传输<strong>BL的反相信号</strong>（如存储“1”时，BLB为低电平）； 两者形成<strong>差分信号</strong>（BL - BLB），目的是<strong>提高抗噪声能力</strong>（共模噪声会同时影响BL和BLB，差分信号不受其干扰）。</li></ul></li><li><strong>SA（Sense Amplifier， sense放大器）</strong>： 连接在每列BL/BLB的末端，用于<strong>放大微小的差分信号</strong>。</li></ul></blockquote><h3 id="地址译码"><a href="#地址译码" class="headerlink" title="地址译码"></a>地址译码</h3><p>​地址译码的本质是<strong>将输入的二进制地址转换为选中特定存储单元的控制信号</strong>，关键目标是<strong>高效激活目标行（字线）<strong>和</strong>选择目标列（位线）</strong>。分为下面几步：</p><ul><li><strong>预译码（Predecoding）</strong>：将行地址拆分为多个子集（如8位行地址拆分为两个4位子集），用低扇入门（如4输入AND）生成预译码信号（16个信号/子集）。这是为了减少高扇入门的数量。</li><li><strong>行译码（Row Decoding）</strong>：将预译码信号组合（如2输入AND）生成<strong>全局字线（GWL）</strong>，再结合<strong>块选择信号</strong>（Block Select）生成<strong>局部字线（LWL）</strong>（Divided Wordline, DWL技术），激活目标行的所有存储单元。</li><li><strong>列译码（Column Decoding）</strong>：将列地址译码，通过**多路复用器（MUX）**选择目标列，连接到sense放大器或写入电路。</li></ul><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719192032806.png"></p><h2 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h2><p>​与SRAM不同，DRAM需定期刷新（dynamic），读写速度慢，适合作为主存。（但同样具有易失性）</p><h3 id="DRAM-1T1C-Cell"><a href="#DRAM-1T1C-Cell" class="headerlink" title="DRAM 1T1C Cell"></a>DRAM 1T1C Cell</h3><p>​DRAM以<strong>1T1C存储单元</strong>（1个晶体管+1个电容）作为存储的基本单元。</p><h3 id="地址译码-1"><a href="#地址译码-1" class="headerlink" title="地址译码"></a>地址译码</h3><p>​DRAM的译码过程可以分为下面几步：</p><ul><li><strong>行译码</strong>：行地址（如12位）通过<strong>行译码器</strong>激活对应的<strong>字线</strong>，选中一行的所有存储单元；</li><li><strong>列译码</strong>：列地址（如10位）通过<strong>列译码器</strong>选择对应的<strong>位线</strong>，连接到sense放大器或写入电路；</li><li><strong>Bank Selection</strong>：现代DRAM包含多个<strong>Bank</strong>，地址中的<strong>Bank ID</strong>选择目标bank，实现并行操作（提高带宽）。</li></ul><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719193007174.png"></p><blockquote><p><strong>地址复用（Address Multiplexing）</strong>：DRAM的地址线是<strong>复用</strong>的（行地址与列地址共用同一组引脚），因此需通过**行地址 strobe（RAS#）<strong>和</strong>列地址 strobe（CAS#）**信号区分。</p></blockquote><h2 id="DRAM-Memory-Controller"><a href="#DRAM-Memory-Controller" class="headerlink" title="DRAM Memory Controller"></a>DRAM Memory Controller</h2><p>​DRAM内存控制器起到“承上启下”的作用：（1）向上仲裁（CPU/I/O）竞争访问权；（2）向下管理调度各DRAM的访问。其核心架构为：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250719193646279.png"></p><p>一些设计要点如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">                      +-----------------+</span><br><span class="line">CPU/I/O Requests →  | 请求仲裁逻辑     | → 胜出请求进入地址映射</span><br><span class="line">                      +-----------------+</span><br><span class="line">                                                ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 地址映射引擎     | → 输出 (Channel, Rank, Bank, Row, Column)</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | DRAM命令生成器   | → 生成 ACT/READ/WRITE/PRE 序列</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 命令调度队列     | → 按策略排序命令 (FIFO/按库/按优先级)</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                            ↓</span><br><span class="line">                                  +-----------------+</span><br><span class="line">                                   | 电气接口驱动     | → 满足时序约束的DRAM信号输出</span><br><span class="line">                                  +-----------------+</span><br></pre></td></tr></table></figure><p>可以类比操作系统的管理：各个DRAM“类似于”各个进程（或者“库”），DRAM Memory Controller“类似于”OS。于是不难理解，其<strong>调度算法</strong>包含轮询 (Round-Robin)，最长队列优先 (LQF)，最早到期优先 (EDF)等。  </p><h2 id="SRAM-DRAM-Modeling"><a href="#SRAM-DRAM-Modeling" class="headerlink" title="SRAM, DRAM Modeling"></a>SRAM, DRAM Modeling</h2><h3 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h3><h4 id="评估原理"><a href="#评估原理" class="headerlink" title="评估原理"></a>评估原理</h4><p>所谓性能，其实就是读、写数据的<strong>延迟（消耗时间）</strong>。以一个DRAM做L4 LLC的系统为例，访问SRAM, DRAM的过程如下图：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250721152125483.png"></p><p>该系统的一些参数以及一些常识性的结果如下：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250721153534548.png"></p><p>以一次访问DRAM为例，访问过程如下：</p><p><img src="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/SRAM,%20DRAM%E5%92%8CMC/image-20250721154434002.png"></p><p>上图访问过程就是评估的原理，真实刻画了访问数据的延迟构成。</p><h4 id="评估方法"><a href="#评估方法" class="headerlink" title="评估方法"></a>评估方法</h4><ul><li>使用仿真工具：使用DRAM-sim可以快捷得到访问时间。</li><li>或者使用一些论文的模型、公式：比如zy学姐的论文On Design Space Exploration of Cache System in Multi-Chiplet Systems (DAC’25)。</li></ul><h3 id="面积、功耗评估"><a href="#面积、功耗评估" class="headerlink" title="面积、功耗评估"></a>面积、功耗评估</h3><p>具体的评估原理就略去了。只需要知道<strong>仿真工具Cacti</strong>即可。</p><h3 id="成本评估"><a href="#成本评估" class="headerlink" title="成本评估"></a>成本评估</h3><p>具体的评估原理就略去了。看论文里面的modeling。</p><blockquote><p><strong>参考文献</strong>：</p><ul><li>Memory Systems (Cache, DRAM, Disk).</li><li>Reducing Latency in an SRAM/DRAM Cache Hierarchy via a Novel Tag-Cache Architecture (DAC’14).</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D集成芯片</title>
      <link href="/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/"/>
      <url>/2025/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="3D集成芯片"><a href="#3D集成芯片" class="headerlink" title="3D集成芯片"></a>3D集成芯片</h1><h2 id="3D集成与封装技术"><a href="#3D集成与封装技术" class="headerlink" title="3D集成与封装技术"></a>3D集成与封装技术</h2><h3 id="从2D-IC到3D-IC"><a href="#从2D-IC到3D-IC" class="headerlink" title="从2D IC到3D IC"></a>从2D IC到3D IC</h3><table><thead><tr><th align="center"><strong>维度</strong></th><th align="center"><strong>2D IC</strong></th><th align="center"><strong>3D IC</strong></th></tr></thead><tbody><tr><td align="center"><strong>结构</strong></td><td align="center">单层平面布局</td><td align="center">多层垂直堆叠（逻辑层、缓存层、DRAM层等）</td></tr><tr><td align="center"><strong>互连方式</strong></td><td align="center">金属线水平绕行（长距离，高RC延迟）</td><td align="center">TSV垂直直连（短距离，低RC延迟）</td></tr><tr><td align="center"><strong>互连密度</strong></td><td align="center">受限于引脚数量（带宽瓶颈）</td><td align="center">TSV密度 <strong>&gt;1000个/mm²</strong>（高带宽）</td></tr><tr><td align="center"><strong>成本、散热</strong></td><td align="center">成本低，散热快</td><td align="center">成本高，散热慢</td></tr></tbody></table><h3 id="3D封装技术"><a href="#3D封装技术" class="headerlink" title="3D封装技术"></a>3D封装技术</h3><p>​<strong>3D封装技术</strong>通过封装级堆叠独立芯片（如Apple A8处理器堆叠CPU与DRAM），使用引线键合（Wire Bonding）或微凸块连接，通信依赖<strong>片外信号</strong>。常见的有2种：</p><p><img src="/./3D%E9%9B%86%E6%88%90%E8%8A%AF%E7%89%87/image-20250719140544510.png"></p><h3 id="3D集成技术"><a href="#3D集成技术" class="headerlink" title="3D集成技术"></a>3D集成技术</h3><p>​该技术产生的是<strong>3D IC</strong>，通过<strong>硅通孔（TSV）</strong> 实现层间垂直互联，提供<strong>片内级</strong>高密度连接（微米级间距）。该技术具有下面的优势：</p><ul><li><strong>线长缩减（Wire Length Reduction）</strong>：带来通信延迟、功耗的减少。</li><li><strong>内存带宽提升（Memory Bandwidth Improvement）</strong>：使用3D架构，可以<strong>堆叠DRAM作末级缓存（LLC）<strong>或者</strong>堆叠DRAM作主存</strong>。</li><li><strong>垂直异构集成（Heterogeneous Integration）</strong>：不同功能层（逻辑/存储/光子）可独立制造，通过TSV互联。</li><li><strong>成本效益（Cost-effective Architecture）</strong>：分割大芯片为小芯片堆叠，提升总体良率。（然而TSV会增加成本）</li></ul><h2 id="3D堆叠处理器设计"><a href="#3D堆叠处理器设计" class="headerlink" title="3D堆叠处理器设计"></a>3D堆叠处理器设计</h2><h2 id="3D-NoC设计"><a href="#3D-NoC设计" class="headerlink" title="3D NoC设计"></a>3D NoC设计</h2><h2 id="3D散热模型"><a href="#3D散热模型" class="headerlink" title="3D散热模型"></a>3D散热模型</h2><h2 id="3D成本模型"><a href="#3D成本模型" class="headerlink" title="3D成本模型"></a>3D成本模型</h2><blockquote><p><strong>参考文献</strong>：Die-stacking Architecture.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 芯片设计基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
